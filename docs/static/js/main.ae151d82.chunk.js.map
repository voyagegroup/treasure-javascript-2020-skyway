{"version":3,"sources":["components/VideoStream.tsx","components/MessageLogList.tsx","components/Chat.tsx","components/ControlPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","primary","position","zIndex","width","maxHeight","undefined","left","top","borderRadius","backgroundColor","VideoStream","srcObject","props","refVideo","useRef","classes","useEffect","current","ref","className","height","overflow","borderTop","marginTop","spacing","messageLog","borderBottom","messageLogTxt","wordWrap","messageLogImg","marginBottom","MessageLog","type","data","datetime","src","alt","MessageLogList","messageList","scrollTop","scrollHeight","map","key","right","margin","fileUpload","paddingLeft","paddingRight","fileInput","display","Chat","id","messages","TextField","onChange","onChangeMessage","value","message","Button","color","onClick","onClickSend","accept","e","onFileChange","htmlFor","variant","component","fullWidth","row","justifyContent","alignItems","ControlPanel","noValidate","autoComplete","label","InputProps","readOnly","myPeerId","navigator","clipboard","writeText","required","onChangeTheirId","onClickCall","videoStreamContainer","videoStream","App","useState","myMediaStream","setMyMediaStream","theirMediaStream","setTheirMediaStream","theirDataStream","setTheirDataStream","setMessages","setMessage","Peer","peer","myId","setMyId","theirId","setTheirId","on","mediaConnection","answer","listenMediaStream","connectMyMediaStream","dataConnection","console","log","listenTheirDataStream","setStream","stream","a","mediaDevices","getUserMedia","video","audio","myStream","concat","autoPlay","playsInline","muted","target","call","connectTheirMediaStream","connect","msg","Date","toISOString","send","imgFile","files","fileReader","FileReader","onload","this","result","readAsDataURL","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ae151d82.chunk.js","sourcesContent":["import React, {VideoHTMLAttributes, useEffect, useRef} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\ninterface Props extends VideoHTMLAttributes<HTMLVideoElement> {\n  primary?: boolean\n  srcObject: MediaStream | null\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: ({primary} : {primary: boolean}) => ({\n      position: primary ? 'relative' : 'absolute',\n      zIndex: primary ? 10 : 11,\n      width: primary ? '100%' : '20%',\n      maxHeight: primary ? '90vh' : undefined,\n      left: 0,\n      top: 0,\n      borderRadius: '10px',\n      backgroundColor: 'black',\n    }),\n  }),\n);\n\nfunction VideoStream({primary = false, srcObject, ...props}: Props) {\n  const refVideo = useRef<HTMLVideoElement>(null);\n  const classes = useStyles({primary});\n\n  useEffect(() => {\n    if (!refVideo.current) return\n    refVideo.current.srcObject = srcObject\n  }, [srcObject]);\n\n  return (\n    <video\n      ref={refVideo}\n      className={classes.root}\n      {...props}\n    ></video>\n  )\n}\n\nexport default VideoStream;","import React, { useEffect, useRef } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: 'calc(100vh - 300px)',\n      overflow: 'scroll',\n      borderTop: 'solid 1px #aaa',\n      marginTop: theme.spacing(1),\n    },\n    messageLog: {\n      borderBottom: 'solid 1px #aaf',\n      width: 'calc(25ch + 50px)',\n    },\n    messageLogTxt: {\n      wordWrap: 'break-word',\n    },\n    messageLogImg: {\n      width: '100%',\n      borderRadius: '10px',\n      marginBottom: theme.spacing(1),\n    }\n  }),\n)\n\nexport interface Message {\n    type: 'txt' | 'img'\n    data: string\n    datetime: string\n}\n\nfunction MessageLog({type, data, datetime}: Message) {\n  const classes = useStyles();\n\n  if (type === 'txt') {\n    return (\n      <div className={classes.messageLog}>\n        <p>{datetime}</p>\n        <p className={classes.messageLogTxt}>{data}</p>\n      </div>\n    );\n  } else if (type === 'img') {\n    return (\n      <div className={classes.messageLog}>\n        <p>{datetime}</p>\n        <img src={data} alt=\"img\" className={classes.messageLogImg}></img>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.messageLog}>\n      <p>{datetime}</p>\n      <p>Invalid message</p>\n    </div>\n  );\n}\n\ninterface Props {\n    messageList: Message[]\n}\n\nfunction MessageLogList({messageList}: Props) {\n  const classes = useStyles();\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current !== null) {\n      ref.current.scrollTop = ref.current.scrollHeight;\n    }\n  }, [messageList])\n\n  return (\n    <div\n      ref={ref}\n      className={classes.root}\n    >\n      {messageList.map(({type, data, datetime}) => {\n        return (\n          <MessageLog key={datetime} type={type} data={data} datetime={datetime} />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default MessageLogList;","import React from 'react';\nimport MessageLogList, { Message } from './MessageLogList';\nimport { makeStyles, Theme, createStyles, Button, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'fixed',\n      right: 0,\n      top: '180px',\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    fileUpload: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n    fileInput: {\n      display: 'none',\n    }\n  }),\n);\n\ninterface Props {\n  message: string\n  messages: Message[]\n  onChangeMessage: (event: any) => void\n  onClickSend: (event: any) => void\n  onFileChange: (event: any) => void\n}\n\nfunction Chat(props: Props) {\n  const classes = useStyles()\n\n  return (\n    <div id='chat' className={classes.root}>\n      <MessageLogList messageList={props.messages} />\n      <TextField\n        type=\"text\"\n        onChange={props.onChangeMessage}\n        value={props.message}\n      ></TextField>\n      <Button color=\"primary\" onClick={props.onClickSend}>SEND</Button>\n      <div className={classes.fileUpload}>\n        <input\n          accept=\"image/*\"\n          className={classes.fileInput}\n          id=\"contained-button-file\"\n          type=\"file\"\n          onChange={(e) => props.onFileChange(e)}\n        />\n        <label htmlFor=\"contained-button-file\">\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            component=\"span\"\n            fullWidth\n          >\n            Upload image file\n          </Button>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'fixed',\n      right: 0,\n      top: 0,\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    row: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  }),\n);\n\ninterface Props {\n  myPeerId: string\n  onChangeTheirId: (event: any) => void\n  onClickCall: (event: any) => void\n}\n\nfunction ControlPanel(props: Props) {\n  const classes = useStyles();\n\n  const copyMyPeerId = () => {\n    navigator.clipboard.writeText(props.myPeerId)\n  }\n\n  return (\n    <form id=\"control-panel\" className={classes.root} noValidate autoComplete=\"off\">\n      <div className={classes.row}>\n        <TextField\n          id=\"my-id\"\n          className=\"peer-id\"\n          label=\"My ID\"\n          type=\"text\"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant=\"filled\"\n          value={props.myPeerId}\n        ></TextField>\n        <Button onClick={() => copyMyPeerId()}>Copy</Button>\n      </div>\n      <div className={classes.row}>\n        <TextField\n          id=\"their-id\"\n          className=\"peer-id\"\n          label=\"Their ID\"\n          type=\"text\"\n          required\n          onChange={props.onChangeTheirId}\n        ></TextField>\n        <Button onClick={props.onClickCall} color=\"primary\">Call</Button>\n      </div>\n    </form>\n  );\n}\n\nexport default ControlPanel;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Peer, { MediaConnection, DataConnection } from 'skyway-js';\nimport VideoStream from './components/VideoStream';\nimport { Message } from './components/MessageLogList';\nimport Chat from './components/Chat';\nimport ControlPanel from './components/ControlPanel';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    videoStreamContainer: {\n      display: 'flex',\n      height: '100vh',\n      alignItems: 'center',\n    },\n    videoStream: {\n      margin: theme.spacing(1),\n      position: 'relative',\n      width: 'calc((100% - 25ch) - 100px)',\n    },\n  }),\n);\n\nfunction App() {\n  const SKYWAY_API_KEY = '9e30e124-19b5-462f-9315-0c8e4ebe5f96';\n  const classes = useStyles();\n\n  const [myMediaStream, setMyMediaStream] = useState<MediaStream | null>(null);\n  const [theirMediaStream, setTheirMediaStream] = useState<MediaStream | null>(null);\n\n  const [theirDataStream, setTheirDataStream] = useState<DataConnection | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [message, setMessage] = useState('');\n\n  const [peer] = useState(new Peer({key: SKYWAY_API_KEY}));\n\n  const [myId, setMyId] = useState('');\n  const [theirId, setTheirId] = useState('');\n\n  useEffect(() => {\n    if (!myMediaStream) {\n      connectMyMediaStream();\n    } else {\n      peer.on('open', () => {\n        setMyId(peer.id);\n      })\n\n      peer.on('call', mediaConnection => {\n        mediaConnection.answer(myMediaStream);\n        listenMediaStream(mediaConnection, setTheirMediaStream);\n      });\n    }\n  }, [peer, myMediaStream]);\n\n  useEffect(() => {\n    peer.on('connection', dataConnection => {\n      console.log(\"get connection\")\n      listenTheirDataStream(dataConnection);\n    });\n  }, [peer, messages])\n\n  useEffect(() => {\n    if (!!peer.id) {\n      setMyId(peer.id)\n    }\n  }, [peer.id])\n\n  const listenMediaStream = (mediaConnection: MediaConnection, setStream: any) => {\n    mediaConnection.on('stream', stream => {\n      setStream(stream);\n    })\n  }\n \n  const connectMyMediaStream = async () => {\n    const myStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    })\n\n    setMyMediaStream(myStream);\n  }\n\n  const connectTheirMediaStream = () => {\n    const mediaConnection = peer.call(theirId, myMediaStream!);\n    listenMediaStream(mediaConnection, setTheirMediaStream);\n  }\n\n  const listenTheirDataStream = (dataConnection: DataConnection) => {\n    setTheirDataStream(dataConnection);\n    dataConnection.on('data', (data: Message) => {\n      setMessages((messages: Message[]) => messages.concat(data))\n    });\n  }\n\n  const connectTheirDataStream = (): DataConnection => {\n    return peer.connect(theirId);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className={classes.videoStreamContainer}>\n        <div className={classes.videoStream}>\n          <VideoStream\n            primary\n            srcObject={theirMediaStream}\n            autoPlay\n            playsInline\n          />\n          <VideoStream\n            srcObject={myMediaStream}\n            autoPlay\n            playsInline\n            muted\n          />\n        </div>\n      </div>\n      <ControlPanel\n        myPeerId={myId}\n        onChangeTheirId={(e) => setTheirId(e.target.value)}\n        onClickCall={() => {\n          connectTheirMediaStream();\n\n          const dataConnection = connectTheirDataStream();\n          listenTheirDataStream(dataConnection);\n        }}\n      />\n      {theirDataStream !== null && \n        <Chat\n          message={message}\n          messages={messages}\n          onChangeMessage={(e) => setMessage(e.target.value)}\n          onClickSend={() => {\n            const msg: Message = {\n              type: 'txt',\n              data: message,\n              datetime: new Date().toISOString(),\n            }\n\n            setMessage('')\n            setMessages((messages: Message[]) => messages.concat(msg))\n            theirDataStream.send(msg);\n          }}\n          onFileChange={(e) => {\n            const imgFile = e.target.files[0];\n            const fileReader = new FileReader();\n\n            fileReader.onload = function() {\n              const base64: any = this.result!;\n\n              const msg: Message = {\n                type: 'img',\n                data: base64,\n                datetime: new Date().toISOString(),\n              }\n\n              theirDataStream.send(msg);\n              setMessages((messages: Message[]) => messages.concat(msg))\n            }\n\n            if (imgFile) {\n              fileReader.readAsDataURL(imgFile);\n            }\n          }}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}